<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置spring的Ioc，把service对象配置进来 -->
    <bean id="userService" class="com.aop.impl.UserServiceImpl"/>

    <!-- spring 中基于xml的AOP配置步骤
            1.把通知Bean也交给spring来管理
            2.使用aop:config标签表明开始AOP的配置
            3.使用aop:aspect标签表明配置切面
                id属性时给切面提供一个唯一标识
                ref属性时指定通知类bean的Id
            4.在aop:aspect标签内部使用对应标签来配置通知的类型，
                我们现在是咧时在printLog方法切入点方法执行之前执行，所以时前置通知
                aop:before表示配置前置通知
                    method属性用于指定Logger类中那个方法是前置通知
                    pointcut属性用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强
                切入点表达式的写法：
                     关键字: execution（表达式）
                     表达式：访问修饰符 返回值 包名.包名.包名....类名.方法名（参数列表）
                     标准的表达式写法：public viod con.aop.impl.UserServiceImpl.saveUser()
                        访问的修饰符可以省略
                        返回值可以用通配符（*），表示任意类型
                        包名可以使用通配符（*），表示任意包，但是几级包之间使用几个*代替，中间使用.
                        包名可以使用.. ，表示当前包及其子包
                        类名和方法名可以使用通配符（*）说明：类名和方法名使用通配符会匹配相同参数的类名和方法名 比如：*（），会找不带参数的方法
                        参数列表：
                            可以直接写数据类型：基本类型直接写名称（int），引用类型写包名.类名的方式 （java.lang.String）
                            使用通配符:
                                ..  表示有无参数即可，匹配任意类型
                                *   表示匹配带参数的，匹配任意类型

                     全通配写法：
                          * *..*(..)

                     实际开发中切入点表达式的通常写法：切入业务层实现类下的所有方法
                          * com.aop.impl.*.*(..)


     -->


    <!-- 配置 Logger 类  -->
    <bean id="logger" class="com.aop.utils.Logger2"/>

    <!--  配置AOP -->
    <aop:config>
        <aop:pointcut id="pt1" expression="execution(* com.aop.impl.*.*(..))"/>
        <!-- 配置切面 -->
        <!--id 可以随便取名-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--  前置通知 -->
<!--            <aop:before method="beforePrintLog" pointcut-ref="pt1" />-->
            <!--  后置通知 -->
<!--            <aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"/>-->
            <!--  异常通知 -->
<!--            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"/>-->
            <!--  最终通知 -->
<!--            <aop:after method="afterPrintLog" pointcut-ref="pt1" />-->
            <!--  配置切入点表达式 id属性用于指定表达式的唯一标识，expression 属性用于指定表达式内容  -->
            <!-- 此标签写在aop:aspect内部，只能当前切面使用 ，它可以写在aop:aspect外面，此时所有切面可用-->
            <!-- <aop:pointcut id="pt1" expression="execution(* com.aop.impl.*.*(..))"/>-->

            <!-- 配置环绕通知  详细的注释请看Logger2中 -->
            <aop:around method="aroundPrintLog" pointcut-ref="pt1"/>
        </aop:aspect>

    </aop:config>

</beans>