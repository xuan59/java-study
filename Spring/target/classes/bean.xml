<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--    <bean id="userDao" class="com.spring.implement.UserDaoImpl"/>-->


    <!-- 把创建的对象交给spring管理  -->
    <!--
      可以通过 factory-method 指定 使用UserServiceImpl下面的哪一个方法
         scope属性用于指定作用范围
            singleton  单例 （默认）
            prototype  多例
    -->
    <!--
        spring中的依赖注入
        依赖注入： Dependency Injection
        IOC的作用： 降低程序间的依赖关系（耦合）
        依赖关系的管理：都交给spring来维护
        在当前类需要使用其他类对象，由spring为我们提供，我们只需要在配置文件中说明依赖关系的维护
        依赖关系的维护： 能注入的数据由三类
                        1、基本类型和string，2、其他bean类型（在配置文件中或者注解配置过的bean），3、复杂欸行/集合类型
                       注入方式：
                       1、使用构造函数提供  2、使用set方法提供  3、使用注解提供
    -->
    <!--
        构造函数注入：
        使用标签constructor-arg
        标签出现位置：bean标签内部
        标签中欧给你的属性：
            type：用于指定注入的数据的数据类型，该数据类型也是构造函数的中某个或某些参数的类型
            index：用于指定要注入的数据位置，指在构造函数中的索引位置，从0开始
            name： 用于指定给构造函数中指定名称的参数赋值
            value
            ref
         优势：在获取对象时，注入数据是必须的操作，否则对象无法创建成功
         劣势：改变了bean对象的实例化方式，是我们在创建对象时，如果用不到这些数据，也必须提供
     -->
    <!--  构造函数注入  -->
   <!-- <bean id="userService" class="com.spring.implement.UserServiceImpl">
        <constructor-arg name="name" value="xxx"/>
        <constructor-arg name="age" value="女"/>
        <constructor-arg name="old" value="18"/>
        <constructor-arg name="birthday" ref="nowDate"/>
    </bean>-->
    <!-- 获取时间  -->
    <bean id="nowDate" class="java.util.Date"/>

    <!--  set注入
        优势：创建对象时没有明确的限制，可以直接使用默认的构造函数
        劣势：如果有某个成员必须有值，则获取对象时有可能set方法没有执行
    -->
    <bean id="userService" class="com.spring.implement.UserServiceImpl">
        <property name="name" value="cc"/>
        <property name="age" value="女"/>
        <property name="old" value="18"/>
        <property name="birthday" ref="nowDate"/>

    </bean>

    <bean id="userService2" class="com.spring.implement.UserServiceImpl2">
        <property name="array">
            <array>
                <value>aa</value>
                <value>bb</value>
                <value>cc</value>
            </array>
        </property>
    </bean>


</beans>